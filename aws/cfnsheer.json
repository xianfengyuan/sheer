{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Provision a VPC (across two AZs), a Bastion and NAT instance, and a generic Security Group with ingress access to the NAT instance and from the Bastion instance. Output the VPC, Subnet, and SG IDs.",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk and Bastion hosts",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },

    "SSHFrom": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "BastionInstanceType": {
      "Description": "Bastion Host EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "NATInstanceType": {
      "Description": "NET Device EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPCAvailabilityZone1": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VPCAvailabilityZone2": {
      "Description": "Two of two Availability Zones that will be used to create subnets. Must be different than VPCAvailabilityZone2.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "NetworkName": {
      "Description": "The name of the network that will be used to tag all resources in the VPC",
      "Type": "String",
      "Default": "Default"
    }
  },

  "Mappings": {
    "Region2VpcCidr" : {
      "us-east-1": {
        "VpcCidr": "10.1.0.0/16",
        "PublicSubnet1Cidr": "10.1.100.0/24",
        "PublicSubnet2Cidr": "10.1.101.0/24",
        "PrivateSubnet1Cidr": "10.1.200.0/24",
        "PrivateSubnet2Cidr": "10.1.201.0/24"
      },
      "us-west-1": {
        "VpcCidr": "10.2.0.0/16",
        "PublicSubnet1Cidr": "10.2.100.0/24",
        "PublicSubnet2Cidr": "10.2.101.0/24",
        "PrivateSubnet1Cidr": "10.2.200.0/24",
        "PrivateSubnet2Cidr": "10.2.201.0/24"
      },
      "us-west-2": {
        "VpcCidr": "10.3.0.0/16",
        "PublicSubnet1Cidr": "10.3.100.0/24",
        "PublicSubnet2Cidr": "10.3.101.0/24",
        "PrivateSubnet1Cidr": "10.3.200.0/24",
        "PrivateSubnet2Cidr": "10.3.201.0/24"
      },
      "eu-west-1": {
        "VpcCidr": "10.3.0.0/16",
        "PublicSubnet1Cidr": "10.3.100.0/24",
        "PublicSubnet2Cidr": "10.3.101.0/24",
        "PrivateSubnet1Cidr": "10.3.200.0/24",
        "PrivateSubnet2Cidr": "10.3.201.0/24"
      },
      "sa-east-1": {
        "VpcCidr": "10.4.0.0/16",
        "PublicSubnet1Cidr": "10.4.100.0/24",
        "PublicSubnet2Cidr": "10.4.101.0/24",
        "PrivateSubnet1Cidr": "10.4.200.0/24",
        "PrivateSubnet2Cidr": "10.4.201.0/24"
      },
      "ap-northeast-1": {
        "VpcCidr": "10.5.0.0/16",
        "PublicSubnet1Cidr": "10.5.100.0/24",
        "PublicSubnet2Cidr": "10.5.101.0/24",
        "PrivateSubnet1Cidr": "10.5.200.0/24",
        "PrivateSubnet2Cidr": "10.5.201.0/24"
      },
      "ap-southeast-1": {
        "VpcCidr": "10.6.0.0/16",
        "PublicSubnet1Cidr": "10.6.100.0/24",
        "PublicSubnet2Cidr": "10.6.101.0/24",
        "PrivateSubnet1Cidr": "10.6.200.0/24",
        "PrivateSubnet2Cidr": "10.6.201.0/24"
      },
      "ap-southeast-2": {
        "VpcCidr": "10.7.0.0/16",
        "PublicSubnet1Cidr": "10.7.100.0/24",
        "PublicSubnet2Cidr": "10.7.101.0/24",
        "PrivateSubnet1Cidr": "10.7.200.0/24",
        "PrivateSubnet2Cidr": "10.7.201.0/24"
      }
    },
    
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-b66ed3de"
      },
      "us-west-2": {
        "AMI": "ami-52ff7262"
      },
      "us-west-1": {
        "AMI": "ami-3bcc9e7e"
      },
      "eu-west-1": {
        "AMI": "ami-0b5b6c7f"
      },
      "ap-southeast-1": {
        "AMI": "ami-02eb9350"
      },
      "ap-southeast-2": {
        "AMI": "ami-ab990e91"
      },
      "ap-northeast-1": {
        "AMI": "ami-14d86d15"
      },
      "sa-east-1": {
        "AMI": "ami-0439e619"
      }
    },

    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "t2.micro": {
        "Arch": "64"
      }
    },

    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-b66ed3de"
      }
    }
  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "VpcCidr"]
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Scheme",
          "Value": "PublicAndPrivate"
        }]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PublicSubnet1Cidr"]
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone1"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PublicSubnet2Cidr"]
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },

    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHFrom"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },

    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PublicSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PublicSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone1"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet1Cidr"]
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet2Cidr"]
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Network",
          "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PrivateSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "PrivateSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": ["AWSNATAMI", {
            "Ref": "AWS::Region"
          }, "AMI"]
        },
        "SecurityGroupIds": [{
          "Ref": "NATSecurityGroup"
        }]
      }
    },

    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": {
            "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet1Cidr"]
          }
        }, 
        {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet1Cidr"]
          }
        },
        {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": {
            "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet1Cidr"]
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        },
        {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        },
        {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG that EB instances will launch into.",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "SourceSecurityGroupId": {
            "Ref": "BastionSecurityGroup"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "SourceSecurityGroupId": {
            "Ref": "BastionSecurityGroup"
          }
        }]
      }
    },

    "BastionIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },

    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "BastionInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "BastionInstanceType"
            }, "Arch"]
          }]
        },
        "SecurityGroupIds": [{
          "Ref": "BastionSecurityGroup"
        }]
      }
    },

    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Bastion host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHFrom"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet1Cidr"]
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PrivateSubnet2Cidr"]
          }
        }]
      }
    }
  },

  "Outputs": {

    "Bastion": {
      "Description": "IP Address of the Bastion host",
      "Value": {
        "Ref": "BastionIPAddress"
      }
    },
    "InstanceSecurityGroup" : {
      "Description" : "The ID of a VPC Security Group that has ingress access to the NAT instance.",
      "Value" : { "Ref" : "InstanceSecurityGroup" }
    },
    "VPCId" : {
      "Description" : "A VPC ID.",
      "Value" : { "Ref" : "VPC" }
    },
    "PrivateSubnet1" : {
      "Description" : "A private VPC subnet ID.",
      "Value" : { "Ref" : "PrivateSubnet1" }
    },
    "PrivateSubnet2" : {
      "Description" : "A private VPC subnet ID. Must be in a different AZ than PrivateSubnet1",
      "Value" : {"Ref" : "PrivateSubnet2" }
    },
    "PublicSubnet1" : {
      "Description" : "A public VPC subnet ID.",
      "Value" : { "Ref" : "PublicSubnet1" }
    },
    "PublicSubnet2" : {
      "Description" : "A public VPC subnet ID. Must be in a different AZ than PrivateSubnet1",
      "Value" : { "Ref" : "PublicSubnet2" }
    },
    "VPCAvailabilityZone1" : {
      "Description": "The AZ that (Public|Private)Subnet1 is launched into.",
      "Value": { "Ref": "VPCAvailabilityZone1"}
    },
    "VPCAvailabilityZone2" : {
      "Description": "The AZ that (Public|Private)Subnet2 is launched into.",
      "Value": { "Ref": "VPCAvailabilityZone2"}
    }
  }
}
